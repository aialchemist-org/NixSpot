Below is all the contents of our docs: 



 This is the content for the doc API.md 

 # NixSpot API Documentation

This document describes the API endpoints that Veonix CLI uses to interact with the NixSpot platform.

## Base URL
```
https://api.nixspot.dev/v1
```

## Authentication

All API requests require authentication using a personal access token:

```bash
Authorization: Bearer <your_token>
```

## Endpoints

### Repositories

#### List Repositories
```http
GET /repos
```

**Response:**
```json
{
  "repositories": [
    {
      "id": "repo_123",
      "name": "my-project",
      "description": "My awesome project",
      "private": false,
      "owner": "username",
      "created_at": "2024-01-01T00:00:00Z",
      "updated_at": "2024-01-02T00:00:00Z",
      "language": "TypeScript",
      "stars": 42,
      "forks": 7,
      "web3_hash": "QmX1234..."
    }
  ]
}
```

#### Create Repository
```http
POST /repos
```

**Request Body:**
```json
{
  "name": "new-project",
  "description": "A new project",
  "private": false
}
```

#### Get Repository
```http
GET /repos/{repo_id}
```

#### Delete Repository
```http
DELETE /repos/{repo_id}
```

### Files

#### List Files
```http
GET /repos/{repo_id}/files
```

**Query Parameters:**
- `path` - Directory path (optional)
- `ref` - Branch/commit reference (default: main)

#### Get File Content
```http
GET /repos/{repo_id}/files/{file_path}
```

#### Upload File
```http
POST /repos/{repo_id}/files
```

**Request Body:**
```json
{
  "path": "src/index.ts",
  "content": "console.log('Hello World')",
  "message": "Add index file",
  "branch": "main"
}
```

### Pull Requests

#### List Pull Requests
```http
GET /repos/{repo_id}/pulls
```

#### Create Pull Request
```http
POST /repos/{repo_id}/pulls
```

**Request Body:**
```json
{
  "title": "Add new feature",
  "description": "This PR adds a new feature",
  "head": "feature-branch",
  "base": "main"
}
```

#### Get Pull Request
```http
GET /repos/{repo_id}/pulls/{pr_id}
```

### AI Features

#### AI Code Review
```http
POST /repos/{repo_id}/pulls/{pr_id}/ai-review
```

**Response:**
```json
{
  "score": 92,
  "suggestions": [
    {
      "line": 15,
      "type": "improvement",
      "message": "Consider adding error handling here"
    }
  ],
  "summary": "Overall good code quality with minor improvements needed"
}
```

#### AI Code Analysis
```http
POST /ai/analyze
```

**Request Body:**
```json
{
  "code": "function hello() { console.log('world'); }",
  "language": "javascript"
}
```

### Web3 Features

#### Verify Repository
```http
POST /repos/{repo_id}/web3/verify
```

**Response:**
```json
{
  "ipfs_hash": "QmX1234...",
  "signature": "0xabc123...",
  "verified": true
}
```

## Veonix CLI Integration

### Configuration

Create a `.veonixrc` file in your project root:

```json
{
  "remote": "https://api.nixspot.dev/v1",
  "token": "your_access_token",
  "repo_id": "repo_123"
}
```

### Common Commands

#### Initialize Repository
```bash
veonix init
```

#### Push Changes
```bash
veonix push -m "Commit message"
```

#### Pull Changes
```bash
veonix pull
```

#### Create Pull Request
```bash
veonix pr create -t "Title" -d "Description"
```

#### AI Code Review
```bash
veonix ai review
```

## Error Handling

All API endpoints return standard HTTP status codes:

- `200` - Success
- `201` - Created
- `400` - Bad Request
- `401` - Unauthorized
- `403` - Forbidden
- `404` - Not Found
- `500` - Internal Server Error

**Error Response Format:**
```json
{
  "error": {
    "code": "INVALID_REQUEST",
    "message": "The request is invalid",
    "details": "Additional error details"
  }
}
```

## Rate Limiting

API requests are limited to:
- 5000 requests per hour for authenticated users
- 100 requests per hour for unauthenticated requests

Rate limit headers are included in responses:
```
X-RateLimit-Limit: 5000
X-RateLimit-Remaining: 4999
X-RateLimit-Reset: 1640995200
```

## Webhooks

Configure webhooks to receive real-time notifications:

```http
POST /repos/{repo_id}/webhooks
```

**Request Body:**
```json
{
  "url": "https://your-app.com/webhook",
  "events": ["push", "pull_request", "issues"],
  "secret": "webhook_secret"
}
```

## SDK Examples

### JavaScript/Node.js
```javascript
const NixSpot = require('@nixspot/sdk');

const client = new NixSpot({
  token: 'your_token',
  baseURL: 'https://api.nixspot.dev/v1'
});

// List repositories
const repos = await client.repos.list();

// Create repository
const newRepo = await client.repos.create({
  name: 'my-project',
  description: 'My project'
});
```

### Python
```python
from nixspot import NixSpot

client = NixSpot(token='your_token')

# List repositories
repos = client.repos.list()

# AI code review
review = client.ai.review_code(
    code="def hello(): print('world')",
    language="python"
)
```

For more examples and detailed documentation, visit [https://docs.nixspot.dev](https://docs.nixspot.dev)

 This is the content for the doc README.md 

 # NixSpot - Next-Gen GitHub Alternative

NixSpot is a modern, AI-powered, Web3-integrated GitHub alternative designed for the future of collaborative development. Built with cutting-edge technologies and featuring real-time collaboration, 3D visualization, and voice-guided navigation.

## üöÄ Features

### Core Platform
- **Repository Management**: Create, view, and manage repositories with advanced filtering
- **Pull Requests**: AI-powered code review with inline suggestions and risk scoring
- **Real-time Collaboration**: Live code editing with presence indicators
- **Voice Guide**: AI voice assistant for navigation and accessibility
- **3D Admin Panel**: Interactive globe visualization of worldwide commits
- **Web3 Integration**: IPFS verification and wallet-based authentication

### AI-Powered Features
- **Smart Code Review**: Automated PR analysis with suggestions
- **AI Assistant**: Context-aware code explanations and improvements
- **Issue Detection**: Automatic bug and tech debt identification
- **Performance Insights**: AI-generated repository health metrics

### Modern UI/UX
- **Responsive Design**: Mobile-first approach with fluid layouts
- **Dark/Light Themes**: Automatic theme switching with user preferences
- **Glassmorphism Effects**: Modern visual design with backdrop blur
- **Smooth Animations**: 60FPS animations with Framer Motion
- **Voice Navigation**: Hands-free platform navigation

## üõ†Ô∏è Tech Stack

### Frontend
- **React 18** - Modern React with hooks and concurrent features
- **Vite** - Lightning-fast build tool and dev server
- **TypeScript** - Type-safe development
- **Tailwind CSS** - Utility-first CSS framework
- **Framer Motion** - Smooth animations and transitions
- **Three.js** - 3D graphics and visualizations

### Backend Integration
- **Supabase** - Backend-as-a-Service for auth and database
- **Socket.io** - Real-time communication
- **Web3 APIs** - Blockchain and IPFS integration
- **OpenAI API** - AI-powered features

### Development Tools
- **ESLint** - Code linting and quality
- **Prettier** - Code formatting
- **PostCSS** - CSS processing
- **Autoprefixer** - CSS vendor prefixes

## üöÄ Quick Start

### Prerequisites
- Node.js 18+ 
- npm or yarn
- Modern web browser with WebGL support

### Installation

1. **Clone the repository**
   ```bash
   git clone https://github.com/your-username/nixspot.git
   cd nixspot
   ```

2. **Install dependencies**
   ```bash
   npm install
   ```

3. **Start development server**
   ```bash
   npm run dev
   ```

4. **Open in browser**
   Navigate to `http://localhost:5173`

### Build for Production

```bash
npm run build
npm run preview
```

## üéØ Key Components

### Voice Guide System
- Toggle voice assistance with the üéôÔ∏è button
- Voice commands: "Help", "Dashboard", "Repositories", "Admin"
- Accessibility-first design with screen reader support

### 3D Admin Panel
- Real-time global commit visualization
- Interactive Earth globe with WebGL rendering
- Performance metrics and system health monitoring

### AI Code Review
- Automated pull request analysis
- Inline code suggestions and improvements
- Risk scoring and security recommendations

### Web3 Integration
- IPFS repository verification
- Wallet-based authentication
- Decentralized identity management

## üîß Configuration

### Environment Variables
Create a `.env.local` file:

```env
VITE_SUPABASE_URL=your_supabase_url
VITE_SUPABASE_ANON_KEY=your_supabase_anon_key
VITE_OPENAI_API_KEY=your_openai_api_key
```

### Customization
- **Themes**: Modify `tailwind.config.js` for custom colors
- **Animations**: Adjust Framer Motion variants in components
- **Voice Commands**: Extend voice recognition in `VoiceContext.tsx`

## üì± Browser Support

- Chrome 90+
- Firefox 88+
- Safari 14+
- Edge 90+

**Required Features:**
- WebGL 2.0 (for 3D visualizations)
- Web Speech API (for voice features)
- WebRTC (for real-time collaboration)

## ü§ù Contributing

1. Fork the repository
2. Create a feature branch (`git checkout -b feature/amazing-feature`)
3. Commit your changes (`git commit -m 'Add amazing feature'`)
4. Push to the branch (`git push origin feature/amazing-feature`)
5. Open a Pull Request

## üìÑ License

This project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.

## üåü Roadmap

- [ ] Real-time collaborative editing
- [ ] Advanced Web3 features
- [ ] Mobile app development
- [ ] Plugin marketplace
- [ ] Enterprise features
- [ ] Multi-language support

## üîó Links

- **Demo**: [https://nixspot-demo.vercel.app](https://nixspot-demo.vercel.app)
- **Documentation**: [https://docs.nixspot.dev](https://docs.nixspot.dev)
- **API Reference**: [https://api.nixspot.dev](https://api.nixspot.dev)

## üí¨ Support

- **Discord**: [Join our community](https://discord.gg/nixspot)
- **Issues**: [GitHub Issues](https://github.com/your-username/nixspot/issues)
- **Email**: support@nixspot.dev

---

Built with ‚ù§Ô∏è by the NixSpot team. Making code collaboration magical! ‚ú®